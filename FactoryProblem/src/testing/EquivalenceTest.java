package testing;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import sqa.main.Income;

class EquivalenceTest {

	Income test;
	
	@BeforeEach
	void setup() {
		test = new Income();
	}
	
	@ParameterizedTest
	@CsvSource({
		//1
		"1000, 150, 450, -1",
		"1000, 150, 1500, -1",
		"1000, 150, 2500, -1",
		"1000, 150, 3500, -1",
		
		"1000, 300, 450, -1",
		"1000, 300, 1500, 49000",
		"1000, 300, 2500, 69000",
		"1000, 300, 3500, -1",
		
		"1000, 600, 450, -1",
		"1000, 600, 1500, 58000",
		"1000, 600, 2500, 78000",
		"1000, 600, 3500, -1",

		"1000, 900, 450, -1",
		"1000, 900, 1500, -1",
		"1000, 900, 2500, -1",
		"1000, 900, 3500, -1",
		
		//2
		"500, 150, 450, -1",
		"500, 150, 1500, -1",
		"500, 150, 2500, -1",
		"500, 150, 3500, -1",
		
		"500, 300, 450, -1",
		"500, 300, 1500, -1",
		"500, 300, 2500, -1",
		"500, 300, 3500, -1",
		
		"500, 600, 450, -1",
		"500, 600, 1500, -1",
		"500, 600, 2500, -1",
		"500, 600, 3500, -1",

		"500, 900, 450, -1",
		"500, 900, 1500, -1",
		"500, 900, 2500, -1",
		"500, 900, 3500, -1",
		
		//3
		"3500, 150, 450, -1",
		"3500, 150, 1500, -1",
		"3500, 150, 2500, -1",
		"3500, 150, 3500, -1",
		
		"3500, 300, 450, -1",
		"3500, 300, 1500, 74000",
		"3500, 300, 2500, 94000",
		"3500, 300, 3500, -1",
		
		"3500, 600, 450, -1",
		"3500, 600, 1500, 83000",
		"3500, 600, 2500, 103000",
		"3500, 600, 3500, -1",

		"3500, 900, 450, -1",
		"3500, 900, 1500, -1",
		"3500, 900, 2500, -1",
		"3500, 900, 3500, -1",
		
		//4
		"5500, 150, 450, -1",
		"5500, 150, 1500, -1",
		"5500, 150, 2500, -1",
		"5500, 150, 3500, -1",
		
		"5500, 300, 450, -1",
		"5500, 300, 1500, -1",
		"5500, 300, 2500, -1",
		"5500, 300, 3500, -1",
		
		"5500, 600, 450, -1",
		"5500, 600, 1500, -1",
		"5500, 600, 2500, -1",
		"5500, 600, 3500, -1",

		"5500, 900, 450, -1",
		"5500, 900, 1500, -1",
		"5500, 900, 2500, -1",
		"5500, 900, 3500, -1",
	})
	
	void strongRobustEquivalence(int impeller, int motor, int cover, Double expected) {
		assertEquals(expected, test.calculateIncome(impeller, motor, cover));
	}
}
